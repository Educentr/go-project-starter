// Подключение zlog-а к приложению
// Модуль реализует основные необходимые функции для инициализации
// и создания логгеров в новых контекстах
package logger

import (
	"context"

	{{ .Logger.Import }}
)

// AppZlogLogger структура хранящая функцию создания инстанса логгера
type AppZlogLogger struct {
	zlogCreator func(ocPrefix, ocPath string) *zlog.Logger
}

// InitAppZlog конструктор для логгера zlog
func InitAppZlog(f func(ocPrefix, ocPath string) *zlog.Logger) AppZlogLogger {
	return AppZlogLogger{
		zlogCreator: f,
	}
}

// Функция позволяющая достать логгер из консекста
// Паникует в случае отсутствия логгера в контексте
func FromContextLoggerZlog(ctx context.Context) AppZlogLogger {
	logI := ctx.Value(loggerContextKey)
	if log, ok := logI.(AppZlogLogger); ok {
		return log
	}

	panic("AppZlogLogger not found in context")
}

// Функция позволяющая переложить логгер из одного контекста в другой
// а так же создать инстанс zlog-а в контексте получателе
func ReWrapZlog(source context.Context, destination context.Context, ocPrefix, ocPath string) context.Context {
	nCtx, err := CopyLoggerContext(source, destination)
	if err != nil {
		{{ .Logger.ErrorMsg "source" "err" "error rewrap logger"}}
		return destination
	}

	return FromContextLoggerZlog(nCtx).zlogCreator(ocPrefix, ocPath).WithContext(nCtx)
}

// Создание zlog-а в контексте
func (l AppZlogLogger) WrapZlog(ctx context.Context, ocPrefix, ocPath string) context.Context {
	return l.zlogCreator(ocPrefix, ocPath).WithContext(ctx)
}
