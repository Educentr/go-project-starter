package {{ .Transport.Handler.Name }}

import (
	"context"

	"fmt"
	"net/http"

	"github.com/Educentr/go-onlineconf/pkg/onlineconf"
	"github.com/go-faster/jx"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/pkg/errors"
	{{ .Logger.Import }}

	"{{ .ProjectPath }}/pkg/app/rest"
	oas "{{ .Transport.Handler.GetTargetGeneratePath .ProjectPath }}"
)

type OgenErrorHandler struct {
}

func (o *OgenErrorHandler) UnexpectedError(ctx context.Context, w http.ResponseWriter, _ *http.Request, errHdl error) {
	{{ .Logger.ErrorMsg "ctx" "errHdl" "Unexpected error from handler"}}
	
	userErr := "UnexpectedError"

	devstand, err := onlineconf.GetBool(ctx, "/devstand", false)
	if err != nil {
		{{ .Logger.ErrorMsg "ctx" "err" "Unexpected error from onlineconf"}}
	}

	if devstand && errHdl != nil {
		userErr = errHdl.Error()
	}

	var (
		decodeParamErr   *ogenerrors.DecodeParamsError
		decodeRequestErr *ogenerrors.DecodeRequestError
	)

	var errResp oas.ErrorDefault

	switch {
	case errors.As(errHdl, &decodeParamErr):
		fallthrough
	case errors.As(errHdl, &decodeRequestErr):
		errResp = oas.ErrorDefault{
			Code:  http.StatusBadRequest,
			Error: fmt.Sprintf("bad request, message: %s", errHdl.Error()),
		}

	default:
		errResp = oas.ErrorDefault{
			Code:  http.StatusInternalServerError,
			Error: fmt.Sprintf("error type: %T, message: %s", errHdl, userErr),
		}
	}

	write(ctx, w, errResp)
}

func (o *OgenErrorHandler) NotFoundError(w http.ResponseWriter, r *http.Request) {
	{{ .Logger.WarnMsg "r.Context()" "NotFoundError" }}

	errResp := oas.ErrorDefault{
		Code: http.StatusNotFound,
		Error: "not found",
	}

	write(r.Context(), w, errResp)
}

func (o *OgenErrorHandler) NotAuthorizedError(w http.ResponseWriter, r *http.Request) {
	{{ .Logger.WarnMsg "r.Context()" "NotAuthorized" }}

	errResp := oas.ErrorDefault{
		Code: http.StatusUnauthorized,
		Error: "not found",
	}

	write(r.Context(), w, errResp)
}

func write(ctx context.Context, w http.ResponseWriter, errResp oas.ErrorDefault) {
	e := jx.GetEncoder()

	errResp.Encode(e)

	w.Header().Set(rest.ContentTypeHeader, rest.ContentTypeJSON)
	w.WriteHeader(int(errResp.Code))

	_, err := e.WriteTo(w)
	if err != nil {
		{{ .Logger.ErrorMsg "ctx" "err" "error write response"}}
	}
}
