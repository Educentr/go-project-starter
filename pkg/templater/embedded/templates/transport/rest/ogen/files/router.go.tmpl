package {{ .Transport.Handler.Name }}

import (
	"context"
	"net/http"

	"github.com/go-faster/errors"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/rs/cors"

	"{{ .ProjectPath }}/internal/app/transport/rest/{{ .Transport.Handler.Name }}/{{ .Transport.Handler.ApiVersion }}/handler"
	"{{ .ProjectPath }}/pkg/app/ds"
	"{{ .ProjectPath }}/pkg/app/rest"
	"{{ .ProjectPath }}/pkg/app/rest/mw"
	oas "{{ .Transport.Handler.GetTargetGeneratePath .ProjectPath }}"
)

// API exists all methods that can help you up your http server for business logic
type API struct {
	mw.DefaultMiddlewares
	OgenErrorHandler
	DefaultOgenMiddlewares
{{ if ne "off" ( index .TransportParams "auth_handler" ) }}
	DefaultOgenSecurityHandler
{{ end }}
}

func (a *API) GetErrorHandler() rest.RestErrorHandler {
	return &a.OgenErrorHandler
}

func (a *API) InitRouters(ctx context.Context, httpSrv *http.Server, srv ds.IService, _ *prometheus.Registry) error {
	oasHandler := &handler.Handler{}

	err := oasHandler.InitHandler(ctx, srv)
	if err != nil {
		return errors.Wrap(err, "Handler initialization error")
	}

	{{ if ne "off" ( index .TransportParams "auth_handler" ) }}
	securityHandler, err := a.NewSecurityHandler(ctx)
	if err != nil {
		return errors.Wrap(err, "security handler initialization")
	}
	{{ end }}
	// TODO	oas.WithTracerProvider(m.TracerProvider()),
	oasServer, err := oas.NewServer(
		oasHandler,
		{{ if ne "off" (index .TransportParams "auth_handler") }}securityHandler,{{ end }}
		oas.WithErrorHandler(a.UnexpectedError),
		oas.WithNotFound(a.NotFoundError),
		oas.WithMiddleware(a.GetOgenMiddlewares(ctx)...),
	)
	if err != nil {
		return errors.Wrap(err, "server initialization")
	}

	errTimeout := oas.ErrorDefault{
		Code:  http.StatusInternalServerError,
		Error: "timeout",
	}

	e := jx.GetEncoder()
	errTimeout.Encode(e)

	// ToDo для прода Default для dev окружения AllowAll а еще лучше брать из конфига
	// 		AllowedOrigins: []string{"*"},
	//	AllowedMethods: []string{
	//		http.MethodHead,
	//		http.MethodGet,
	//		http.MethodPost,
	//		http.MethodPut,
	//		http.MethodPatch,
	//		http.MethodDelete,
	//	},
	//	AllowedHeaders:   []string{"*"},
	//	AllowCredentials: false,
	httpSrv.Handler = cors.AllowAll().Handler(oasServer)

	return nil
}
