package {{ .Transport.Handler.Name }}

import (
	"context"
	"net/http"

	"github.com/go-faster/errors"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/rs/cors"

	"{{ .ProjectPath }}/internal/app/transport/rest/{{ .Transport.Handler.Name }}/{{ .Transport.Handler.ApiVersion }}/handler"
	"{{ .ProjectPath }}/pkg/app/ds"
	"{{ .ProjectPath }}/pkg/app/rest"
	"{{ .ProjectPath }}/pkg/app/rest/mw"
	oas "{{ .Transport.Handler.GetTargetGeneratePath .ProjectPath }}"
)

// API exists all methods that can help you up your http server for business logic
type API struct {
	mw.DefaultMiddlewares
	OgenErrorHandler
}

func (a *API) GetErrorHandler() rest.RestErrorHandler {
	return &a.OgenErrorHandler
}

func (a *API) InitRouters(ctx context.Context, httpSrv *http.Server, srv ds.IService, _ *prometheus.Registry) error {
	oasHandler := &handler.Handler{}

	err := oasHandler.InitHandler(ctx, srv)
	if err != nil {
		return errors.Wrap(err, "Handler initialization error")
	}

	// TODO ogen middlewares
	// securityHandler := NewSecurityHandler()
	// TODO	oas.WithTracerProvider(m.TracerProvider()),
	oasServer, err := oas.NewServer(
		oasHandler,
		// TODO ogen middlewares
		//		securityHandler,
		// securityHandler := NewSecurityHandler()
		oas.WithErrorHandler(a.UnexpectedError),
		oas.WithNotFound(a.NotFoundError),
		// TODO ogen middlewares
		//		oas.WithMiddleware(mw_ogen.OgenMiddlewareAuth(a.bucket.AppInfo.AppName)),
	)
	if err != nil {
		return errors.Wrap(err, "server initialization")
	}

	httpSrv.Handler = cors.Default().Handler(oasServer)

	return nil
}
