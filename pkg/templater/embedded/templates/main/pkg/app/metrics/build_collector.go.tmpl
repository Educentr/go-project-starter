package metrics

import (
	"github.com/prometheus/client_golang/prometheus"

	"{{ .ProjectPath }}/pkg/app/ds"
)

// selfCollector implements Collector for a single Metric so that the Metric
// collects itself. Add it as an anonymous field to a struct that implements
// Metric, and call init with the Metric itself as an argument.
type infoCollector struct {
	self prometheus.Metric
}

// Describe implements Collector.
func (c *infoCollector) Describe(ch chan<- *prometheus.Desc) {
	ch <- c.self.Desc()
}

// Collect implements Collector.
func (c *infoCollector) Collect(ch chan<- prometheus.Metric) {
	ch <- c.self
}

func InfoCollector(desc *prometheus.Desc) prometheus.Collector {
	return &infoCollector{
		self: prometheus.MustNewConstMetric(
			desc,
			prometheus.GaugeValue,
			1,
		),
	}
}

func BuildInfoCollector(name string, info *ds.AppInfo) prometheus.Collector {
	return InfoCollector(
		prometheus.NewDesc(
			name+"_build_info",
			"Build information about the "+name+" app.",
			nil,
			prometheus.Labels{
				"appname":     info.AppName,
				"version":     info.Version,
				"buildCommit": info.BuildCommit,
				"buildtime":   info.BuildTime,
			},
		),
	)
}
