package service

import (
	"context"

	"github.com/pkg/errors"
	"github.com/prometheus/client_golang/prometheus"
	{{ .Logger.Import }}

	"{{ .ProjectPath }}/internal/app/constant"
	{{ range $_, $driver := .Drivers }}
	{{ $driver | ToLower }} "{{ $driver.Import }}"
	{{ end }}
	"{{ .ProjectPath }}/pkg/app/ds"
	"{{ .ProjectPath }}/pkg/app/healthstate"
	"{{ .ProjectPath }}/pkg/app/serviceauth"
	"{{ .ProjectPath }}/pkg/servicemetrics"
)

type Service struct {
	healthstate.Service
	servicemetrics.EmptyMetrics
	serviceauth.Authorizer
	{{ range $_, $driver := .Drivers }}
	{{ $driver.Name | ToLower }} {{ $driver.DataType }}
	{{ end }}
}

func NewService(ctx context.Context) (ds.IService, error) {
	srv := &Service{}

	return srv.Init(ctx)
}

{{ if ne 0 ( len .Drivers ) }}
func (s *Service) setDrivers(drvs []ds.IDriver) error {
	for _, drv := range drvs {
		switch d := drv.(type) {
		{{ range $_, $driver := .Drivers }}
		case *{{ $driver.Type }}:
			s.{{ $driver.Name | ToLower }} = d
		{{ end }}
		default:
			return errors.Errorf("unknown driver type: %T", drv)
		}
	}

	return nil
}
{{ end }}

{{ if not .SkipServiceInit }}
func (s *Service) InitService(ctx context.Context, drvs []ds.IDriver, bucket ds.ServerBucket, m *prometheus.Registry) error {
	s.Service.InitState(ctx, drvs, bucket, m)
	s.EmptyMetrics.InitMetrics(ctx, constant.ServiceName, m)
	s.Authorizer.Init(ctx, drvs, m)
{{ if ne 0 ( len .Drivers ) }}
	return s.setDrivers(drvs)
{{ else }}
	return nil
{{ end }}
}
{{ end }}
