package service

import (
	"context"

	"github.com/pkg/errors"
	"github.com/prometheus/client_golang/prometheus"
	{{ .Logger.Import }}

	"{{ .ProjectPath }}/internal/app/constant"
	{{ range $_, $driver := .Drivers }}
	{{ $driver.Name | ToLower }} "{{ $driver.Import }}"
	{{ end }}
	"{{ .ProjectPath }}/pkg/app/ds"
	"{{ .ProjectPath }}/pkg/app/healthstate"
	"{{ .ProjectPath }}/pkg/app/serviceauth"
	"{{ .ProjectPath }}/pkg/servicemetrics"
)

type Service struct {
	healthstate.Service
	servicemetrics.EmptyMetrics
	serviceauth.Authorizer
	{{ range $_, $driver := .Drivers }}
	{{ $driver.Name | ToLower }} *{{ $driver.Package }}.{{ $driver.ObjName }}
	{{ end }}
}

func NewService(ctx context.Context) (ds.IService, error) {
	srv := &Service{}

	return srv.Init(ctx)
}

{{ if ne 0 ( len .Drivers ) }}
func (s *Service) setDrivers(drvs []ds.Runnable) error {
	for _, drv := range drvs {
		switch d := drv.(type) {
		{{ range $_, $driver := .Drivers }}
		case *{{ $driver.Package }}.{{ $driver.ObjName }}:
			s.{{ $driver.Name | ToLower }} = d
		{{ end }}
		default:
			return errors.Errorf("unknown driver type: %T", drv)
		}
	}

	return nil
}
{{ end }}

{{ if not .SkipServiceInit }}
var (
	errAppReadyNil = errors.New("app ready pointer can't be nil")
	errAppInfoNil  = errors.New("app info pointer can't be nil")
)

func (s *Service) Init(_ context.Context) (*EmptyService, error) {
	return &EmptyService{
		Service: s,
	}, nil
}

//nolint:decorder
type EmptyService struct {
	*Service
}

func (s *EmptyService) InitService(ctx context.Context, drvs []ds.Runnable, bucket ds.ServerBucket, m *prometheus.Registry) error {
	err := s.InitState(ctx, drvs, bucket, m)
	if err != nil {
		return errors.Wrap(err, "error init state")
	}

	s.Metrics, err = s.InitMetrics(ctx, constant.ServiceName, s.Metrics)
	if err != nil {
		return errors.Wrap(err, "error init metrics")
	}
	
	{{ if ne 0 ( len .Drivers ) }}
	s.setDrivers(drvs)
	{{ end }}

	return nil
}
{{ end }}
