package rest

import (
	"context"
	"fmt"
	"net/http"

    {{ .Logger.Import }}
	"golang.org/x/sync/errgroup"

	"{{ .ProjectPath }}/internal/pkg/ds"
	"{{ .ProjectPath }}/internal/pkg/metrics"
	"{{ .ProjectPath }}/internal/pkg/service"
)

type Rest struct {
	// Информация о приложении
	bucket ds.ServerBucket

	// Контекст приложения
	ctx context.Context

	// Сервис с бизнес логикой приложения
	srv *service.Service

	// АПИ как презентационный уровень для сервиса
	router RestRouter
}

func NewRestServer(router RestRouter) (*RestServer, error) {
	s := &OgenServer{
		router: router,
	}

	return s, nil
}

func (s *RestServer) Ctx() context.Context {
	return s.ctx
}

func (s *RestServer) Handler() any {
	return s.router.Handler()
}

func (s *RestServer) InitServer(ctx context.Context, bucket ds.ServerBucket, metrics *metrics.Metrics, srv *service.Service) error {
	s.ctx = ctx
	s.bucket = bucket

	var err error

	s.srv = srv

	err = s.api.InitRouters(s.ctx, s.srv, metrics)
	if err != nil {
		return fmt.Errorf("error initialization API Routers: %w", err)
	}

	return nil
}

func (s *RestServer) RunServer(errGr *errgroup.Group) {
	ctx := s.ctx

    {{ .Logger.InfoMsg "ctx" "Run rest api server" }}

	// initialization http server
	errGr.Go(func() error {
		return s.api.RunRouters(ctx)
	})
}
