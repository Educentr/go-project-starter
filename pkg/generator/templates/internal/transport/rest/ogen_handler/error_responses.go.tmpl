package {{ .Handler.Name | toLower }}

import (
	"context"
	"fmt"
	"net/http"

	"github.com/go-faster/jx"
	"github.com/ogen-go/ogen/ogenerrors"
	{{ .Logger.Import }}

	"{{ .ProjectPath }}/internal/pkg/config"
	rctx "{{ .ProjectPath }}/internal/pkg/request_ctx"
	oas "{{ .ProjectPath }}/pkg/{{ .ProjectName }}/hello"
)

func UnexpectedError(ctx context.Context, w http.ResponseWriter, r *http.Request, errHdl error) {
	{{ .Logger.ErrorMsg "r.Context()" "errHdl" "Unexpected error from handler" "CallerSkipFrame(2)" }}

	nick := ""

	actor, err := rctx.GetActor(ctx)
	if err == nil {
		nick = actor.Nick
	}

	cfg := config.FromContext(ctx)
	userErr := "UnexpectedError"

	if cfg != nil && cfg.Static.DevStand && errHdl != nil {
		userErr = errHdl.Error()
	}

	e := jx.GetEncoder()

	switch errHdl.(type) {
	case *ogenerrors.DecodeParamsError:
		errResp := oas.ErrorSimple{
			Error: "bad_request",
		}

		errResp.Encode(e)
	default:
		errResp := oas.ErrorExtended{
			Status: 500,
			Body:   oas.ErrorSimple{Error: fmt.Sprintf("%T %s", errHdl, userErr)},
			Nick:   oas.NewOptNick(oas.Nick(nick)),
		}

		errResp.Encode(e)
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusInternalServerError)

	_, _ = w.Write(e.Bytes())
}

func NotFoundError(w http.ResponseWriter, r *http.Request) {
	{{ .Logger.WarnMsg "r.Context()" "errHdl" "NotFound" "CallerSkipFrame(1)" `Bytes("RequestURI", []byte(r.RequestURI))` }}

	errResp := oas.ErrorSimple{
		Error: "NOT/FOUND",
	}

	e := jx.GetEncoder()

	errResp.Encode(e)

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusNotFound)

	_, _ = w.Write(e.Bytes())
}
