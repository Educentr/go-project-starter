package main

import (
	"context"
	"os"

	{{ .Logger.Import }}
	"gitlab.educentr.info/golang/service-layout/internal/app"
	publicapi "gitlab.educentr.info/golang/service-layout/internal/app/public-api"
	"gitlab.educentr.info/golang/service-layout/internal/pkg/ds"
	"gitlab.educentr.info/golang/service-layout/internal/pkg/ogen_server"
)

// ldflags
var (
	Version     string
	BuildTime   string
	BuildOS     string
	BuildCommit string
)

func main() {
	// initialization parent background context
	mainCtx := context.Background()

	application, err := app.New(mainCtx, getAppInfo())
	if err != nil {
		{{ .Logger.ErrorMsg "mainCtx" "err" "can't create new application" }}
		os.Exit(2)
	}

	{{ .Logger.InfoMsg "mainCtx" "application created" }}

	// initializing graceful stop for application
	application.initGracefulStop()

	{{ if ne 0 len .Handlers }}
	application.SetTransport(
		{{ range $_, $handler := .Handlers }} {{ $handler.Transport }}.New(&{{ $handler.Name }}.API{Name: "{{ .AppName }}_{{ $handler.Name }}_{{ $handler.Transport }}" ), {{ end }}
	)

	err = application.InitTransports()
	if err != nil {
		{{ .Logger.ErrorMsg "mainCtx" "err" "can't initialize transport" }}
		os.Exit(3)
	}
	{{ end }}

	
	err = application.Run()
	if err != nil {
		{{ .Logger.ErrorMsg "mainCtx" "err" "can't start application" }}
		os.Exit(4)
	}

	{{ .Logger.InfoMsg "mainCtx" "service has been successfully shutdown" }}
}

func getAppInfo() *ds.AppInfo {
	return ds.NewAppInfo().
		WithVersion(Version).
		WithBuildTime(BuildTime).
		WithBuildOS(BuildOS).
		WithBuildCommit(BuildCommit)
}
