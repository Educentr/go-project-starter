openapi: 3.0.2
servers:
  - url: http://localhost:{port}/{basePath}
    description: The production API server
    variables:
      port:
        enum:
          - '8080'
        default: '8080'
      basePath:
        default: v1
info:
  version: 1.0.0
  title: Item store schema
tags:
  - name: item
    description: Everything about your Items
paths:
  /item:
    post:
      tags:
        - item
      summary: Add a new item to the store
      description: Add a new item to the store
      operationId: addItem
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDefault'
      requestBody:
        description: Create a new item in the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
  '/items':
    get:
      tags:
        - item
      summary: Returns all items
      description: Returns all items
      operationId: getItems
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Items'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDefault'
  '/item/{itemId}/like':
    put:
      tags:
        - item
      summary: Like a item
      parameters:
        - name: itemId
          in: path
          description: ID of item to like
          required: true
          schema:
            type: integer
            format: int64
      description: ''
      operationId: likeItem
      responses:
        '201':
          description: successful operation
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDefault'
  '/item/{itemId}':
    get:
      tags:
        - item
      summary: Find item by ID
      description: Returns a single item
      operationId: getItemByID
      parameters:
        - name: itemId
          in: path
          description: ID of item to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Item not found
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDefault'
    put:
      tags:
        - item
      summary: Updates a item in the store
      parameters:
        - name: itemId
          in: path
          description: ID of item to return
          required: true
          schema:
            type: integer
            format: int64
      description: ''
      operationId: updateItem
      requestBody:
        description: Create a new item in the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: successful operation
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDefault'
    delete:
      tags:
        - item
      summary: Deletes a item
      description: ''
      operationId: deleteItem
      parameters:
        - name: itemId
          in: path
          description: Item id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDefault'
components:
  schemas:
    ErrorDefault:
      required:
        - code
        - error
      properties:
        code:
          type: integer
          format: int32
        error:
          type: string
      type: object
    ItemStatus:
      type: string
      description: item status in the store
      enum:
        - available
        - pending
        - sold
    Items:
      type: array
      items:
        $ref: '#/components/schemas/Item'
    Item:
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        photoUrl:
          type: string
        likes:
          type: integer
          format: int64
          example: 1
        status:
          $ref: '#/components/schemas/ItemStatus'
      type: object
  requestBodies:
    Item:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Item'
      description: Item object that needs to be added to the store