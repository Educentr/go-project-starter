package {{ .Transport.Name }}

import (
	"context"
	"net/http"
	"net/http/pprof"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promhttp"

	"{{ .ProjectPath }}/internal/app/transport/rest/{{ .Transport.Name }}/{{ .Transport.ApiVersion }}/handler"
	"{{ .ProjectPath }}/pkg/ds"
	"{{ .ProjectPath }}/pkg/app/rest"
	"{{ .ProjectPath }}/pkg/app/rest/mw"
)

// API exists all methods that can help you up your http server for business logic
type API struct {
	mw.EmptyMiddlewares
	rest.EmptyErrorHandler
}

// ToDo сделать возможность добавления своих роутов
func (a *API) InitRouters(ctx context.Context, httpSrv *http.Server, srv ds.IService, metrics *prometheus.Registry) error {
	sysController := &handler.Handler{}

	err := sysController.InitHandler(ctx, srv)
	if err != nil {
		return err
	}

	// using default http server
	mux := http.NewServeMux()

	{
		// version
		mux.HandleFunc("/version", sysController.VersionHandler)

		// k8s probes
		mux.HandleFunc("/ready", sysController.ReadyHandler)
		mux.HandleFunc("/live", sysController.LiveHandler)

		// prometheus metrics
		mux.HandleFunc("/metrics", promhttp.HandlerFor(metrics, promhttp.HandlerOpts{}).ServeHTTP)

		// pprof
		mux.HandleFunc("/debug/pprof/", pprof.Index)
		mux.HandleFunc("/debug/pprof/cmdline", pprof.Cmdline)
		mux.HandleFunc("/debug/pprof/profile", pprof.Profile)
		mux.HandleFunc("/debug/pprof/symbol", pprof.Symbol)
		mux.HandleFunc("/debug/pprof/trace", pprof.Trace)
		mux.Handle("/debug/pprof/goroutine", pprof.Handler("goroutine"))
		mux.Handle("/debug/pprof/heap", pprof.Handler("heap"))
		mux.Handle("/debug/pprof/threadcreate", pprof.Handler("threadcreate"))
		mux.Handle("/debug/pprof/block", pprof.Handler("block"))

		// ToDo swagger docs
		// mux.Handle("/docs/", http.StripPrefix("/docs/", swaggerAssets))
	}

	httpSrv.Handler = mux

	return nil
}
