package service

import (
	"context"
	"net/url"
	"time"

	"github.com/pkg/errors"
	"github.com/prometheus/client_golang/prometheus"

	"{{ .ProjectPath }}/internal/app/constant"
	{{ range $_, $tr := .Applications.GetRestTransport }}
	{{ if eq $tr.GeneratorType "ogen_client" }}
	{{ range $_, $imp := $tr.Import }}
	{{ $imp }}
	{{- end }}
	{{- end }}
	{{- end }}
	
	{{ range $_, $driver := .Drivers }}
	"{{ $driver.Import }}"
	{{ end }}

	{{ .Logger.Import }}

	"{{ .ProjectPath }}/pkg/app/rest"
	"{{ .ProjectPath }}/pkg/reqctx"
	"{{ .ProjectPath }}/pkg/ds"
	"{{ .ProjectPath }}/pkg/app/healthstate"
	"{{ .ProjectPath }}/pkg/app/serviceauth"
	"{{ .ProjectPath }}/pkg/servicemetrics"
)

type Service struct {
	healthstate.Service
	servicemetrics.EmptyMetrics
	serviceauth.Authorizer
	{{ range $_, $tr := .Applications.GetRestTransport }}
	{{ if eq $tr.GeneratorType "ogen_client" }}
	{{ $tr.Name | ToLower }} *{{ $tr.PkgName }}.Client
	{{ end }}
	{{ end }}
	{{ range $_, $driver := .Drivers }}
	{{ $driver.Name | ToLower }} *{{ $driver.Package }}.{{ $driver.ObjName }}
	{{ if ne $driver.ServiceInjection "" }}
	{{ $driver.ServiceInjection}}
	{{ end }}
	{{ end }}
}

type ActionEnableUsers string

const (
	LoginAction ActionEnableUsers = "login"
)

func (s *Service) HitInfo(ctx context.Context, method string, u *url.URL, status int, contentLength int, ip string, contentType string, userAgent string, referer string, execTime float64) {
} 

func (s *Service) BotHitInfo(ctx context.Context, processInfo reqctx.RequestProcessInfo, status string, contentLength int, execTime time.Duration) {
}

func UserEnabled(ctx context.Context, tgID int64, action ActionEnableUsers) (bool, error) {
	enabledUsers, err := onlineconf.GetStrings(ctx, onlineconf.MakePath(constant.ServiceName, "settings", "enabled", string(action)), []string{})
	if err != nil {
		return false, err
	}

	if len(enabledUsers) == 0 {
		_, ex, err := onlineconf.GetStringIfExists(ctx, onlineconf.MakePath(constant.ServiceName, "settings", "enabled", string(action)))
		if err != nil {
			return false, err
		}

		if !ex {
			// если нету ключа значит включено для всех
			return true, nil
		}

		_, ex, err = onlineconf.GetStringIfExists(ctx, onlineconf.MakePath(constant.ServiceName, "settings", "enabled", string(action), strconv.FormatInt(tgID, 10)))
		if err != nil {
			return false, err
		}

		return ex, nil
	}


	if len(enabledUsers) == 1 && enabledUsers[0] == "full" {
		return true, nil
	}
	
	enableUsersInt := make(map[int64]struct{}, len(enabledUsers))

	for _, eu := range enabledUsers {
		uID, err := strconv.ParseInt(eu, 10, 64)
		if err != nil {
			{{ .Logger.ErrorMsg "ctx" "err" "error parse user_id" "Str(\"user_id\", eu)"}}

			continue
		}

		enableUsersInt[uID] = struct{}{}
	}

	if _, ex := enableUsersInt[tgID]; ex {
		return true, nil
	}

	return false, nil
}

func NewService(ctx context.Context) (ds.IService, error) {
	srv := &Service{}

	return srv.Init(ctx)
}

{{ if ne 0 ( len .Drivers ) }}
func (s *Service) setDrivers(drvs []ds.Runnable) error {
	for _, drv := range drvs {
		switch d := drv.(type) {
		{{ range $_, $driver := .Drivers }}
		case *{{ $driver.Package }}.{{ $driver.ObjName }}:
			s.{{ $driver.Name | ToLower }} = d
		{{ end }}
		default:
			return errors.Errorf("unknown driver type: %T", drv)
		}
	}

	return nil
}
{{ end }}

{{ if not .SkipServiceInit }}
var (
	errAppReadyNil = errors.New("app ready pointer can't be nil")
	errAppInfoNil  = errors.New("app info pointer can't be nil")
)

func (s *Service) Init(_ context.Context) (*EmptyService, error) {
	return &EmptyService{
		Service: s,
	}, nil
}

//nolint:decorder
type EmptyService struct {
	*Service
}

func (s *EmptyService) InitService(ctx context.Context, drvs []ds.Runnable, bucket ds.ServerBucket, m *prometheus.Registry) error {
	err := s.InitState(ctx, drvs, bucket, m)
	if err != nil {
		return errors.Wrap(err, "error init state")
	}

	err = s.InitMetrics(ctx, constant.ServiceName, m)
	if err != nil {
		return errors.Wrap(err, "error init metrics")
	}
	
	{{ range $_, $tr := .Applications.GetRestTransport }}
	{{ if eq $tr.GeneratorType "ogen_client" }}
	{{ $tr.Name }}Cln := {{ $tr.Name }}.NewClient()

	s.{{ $tr.Name }}, err = {{ $tr.Name }}Cln.GetClient{{ $tr.Name }}(ctx)
	if err != nil {
		return errors.Wrap(err, "error init {{ $tr.Name }} client")
	}
	{{- end }}
	{{- end }}

	{{ if ne 0 ( len .Drivers ) }}
	return s.setDrivers(drvs)
	{{ else }}
	return nil
	{{ end }}
}
{{ end }}

type EmptyServiceToHandle struct{}

func (h *EmptyServiceToHandle) GetEmptySrv(aSrv any) (*EmptyService, error) {
	srv, ok := aSrv.(*EmptyService)
	if !ok {
		return nil, rest.ErrServiceType
	}

	return srv, nil
}
