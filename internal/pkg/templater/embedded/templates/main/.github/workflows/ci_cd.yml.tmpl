name: CI Pipeline

on:
  push:
    branches:
      - main
      - staging

jobs:
  prepare-env:
    runs-on: ubuntu-latest
    outputs:
      ENABLE_BUILD: ${{"{{"}} steps.vars_enabled.outputs.ENABLE_BUILD {{"}}"}}
      RELEASE: ${{"{{"}} steps.vers_and_containers.outputs.RELEASE {{"}}"}}
      CONTAINERS: ${{"{{"}} steps.vers_and_containers.outputs.CONTAINERS {{"}}"}}
      ARTIFACTS: ${{"{{"}} steps.vers_and_containers.outputs.ARTIFACTS {{"}}"}}

      ENABLE_DEPLOY: ${{"{{"}}steps.vars_enabled.outputs.ENABLE_DEPLOY {{"}}"}}
      DEPLOY_ENVS: ${{"{{"}} steps.vars_deploy.outputs.DEPLOY_ENVS {{"}}"}}
      OC_HOST: ${{"{{"}} steps.vars_deploy.outputs.OC_HOST {{"}}"}}
      OC_PORT: ${{"{{"}} steps.vars_deploy.outputs.OC_PORT {{"}}"}}
      OC_USER: ${{"{{"}} steps.set_env_main.outputs.OC_USER {{"}}"}}
      OC_PASSWORD: ${{"{{"}} steps.set_env_main.outputs.OC_PASSWORD {{"}}"}}
      ENV_TYPE: ${{"{{"}} steps.set_env_main.outputs.ENV_TYPE {{"}}"}}
      LEN_EXPECTED: ${{"{{"}} steps.vars_deploy.outputs.LEN_EXPECTED {{"}}"}}
      SSH_HOST_MATRIX: ${{"{{"}} steps.vars_deploy.outputs.SSH_HOST_MATRIX {{"}}"}}
      INTERNAL_SUBNET: ${{"{{"}} steps.vars_deploy.outputs.INTERNAL_SUBNET {{"}}"}}        
      {{- range $_, $a := .Applications }}
        {{ $applicationName := $a.Name | ReplaceDash }}
      PORT_PREFIX_{{ $applicationName | ToUpper }}_TRAEFIK: ${{"{{"}} steps.set_env_main.outputs.PORT_PREFIX_{{ $applicationName | ToUpper }}_TRAEFIK {{"}}"}}
        {{- range $_, $t := $a.GetRestTransport }}{{ if ne $t.GeneratorType "ogen_client" }}
        {{ if $t.PublicService }}
      DOMAIN_{{ $t.Name | ToUpper }}: ${{"{{"}} steps.set_env_main.outputs.DOMAIN_{{ $t.Name | ToUpper }} {{"}}"}}
        {{ end }}
      PORT_PREFIX_{{ $applicationName | ToUpper }}_{{ $t.Name | ToUpper }}: ${{"{{"}} steps.set_env_main.outputs.PORT_PREFIX_{{ $applicationName | ToUpper }}_{{ $t.Name | ToUpper }} {{"}}"}}
        {{ end }}{{ end }}
      {{ end }}

    steps:
      - name: Get branch
        uses: noliran/branch-based-secrets@v1
        with:
          secrets: ENABLED,ENV_TYPE,OC_USER,OC_PASSWORD,OC_HOST,OC_PORT,{{- range $_, $a := .Applications }}PORT_PREFIX_{{ $a.Name | ToUpper | ReplaceDash }}_TRAEFIK,{{ range $_, $t := $a.GetRestTransport }}{{ if ne $t.GeneratorType "ogen_client" }}PORT_PREFIX_{{ $a.Name | ToUpper | ReplaceDash }}_{{ $t.Name | ToUpper }},{{ if $t.PublicService }}DOMAIN_{{ $t.Name | ToUpper }},{{ end }}{{ end }}{{ end }}{{ end }}SSH_HOST,INTERNAL_SUBNET

      - name: Use vars
        id: vars_enabled
        run: |
          if [ "${{"{{"}} vars[env.ENABLED_NAME] {{"}}"}}" == "ENABLED" ]; then
            echo "ENABLE_BUILD=true" >> $GITHUB_OUTPUT
            echo "ENABLE_DEPLOY=true" >> $GITHUB_OUTPUT
          elif [ "${{"{{"}} vars[env.ENABLED_NAME] {{"}}"}}" == "ENABLED_ONLY_BUILD" ]; then
            echo "ENABLE_BUILD=true" >> $GITHUB_OUTPUT
            echo "ENABLE_DEPLOY=false" >> $GITHUB_OUTPUT
            echo "DEPLOY_ENVS=[]" >> $GITHUB_OUTPUT
          else
            echo "Skip branch ${GITHUB_REF}"
            echo "ENABLE_BUILD=false" >> $GITHUB_OUTPUT
            echo "ENABLE_DEPLOY=false" >> $GITHUB_OUTPUT
            echo "DEPLOY_ENVS=[]" >> $GITHUB_OUTPUT
            exit 0
          fi

      - name: Deploy vars
        id: vars_deploy
        if: steps.vars_enabled.outputs.ENABLE_DEPLOY == 'true'
        run: |
          if [ -z "${{"{{"}} vars[env.SSH_HOST_NAME] {{"}}"}}" ]; then
            echo "Empty SSH_HOST"
            exit 1
          fi

          echo 'SSH_HOST_MATRIX=${{"{{"}} vars[env.SSH_HOST_NAME] {{"}}"}}' >> $GITHUB_OUTPUT

          if [ -z "${{"{{"}} vars[env.OC_HOST_NAME] {{"}}"}}" ]; then
            echo "Empty OC_HOST"
            exit 2
          fi
          echo 'OC_HOST=${{"{{"}} vars[env.OC_HOST_NAME] {{"}}"}}' >> $GITHUB_OUTPUT

          if [ -z "${{"{{"}} vars[env.OC_PORT_NAME] {{"}}"}}" ]; then
            echo "Empty OC_PORT use 443"
            echo 'OC_PORT=443' >> $GITHUB_OUTPUT
          else 
            echo 'OC_PORT=${{"{{"}} vars[env.OC_PORT_NAME] {{"}}"}}' >> $GITHUB_OUTPUT
          fi

          if [ -z "${{"{{"}} vars[env.INTERNAL_SUBNET_NAME] {{"}}"}}" ]; then
            echo "Empty INTERNAL_SUBNET"
            exit 2
          fi
          echo 'INTERNAL_SUBNET=${{"{{"}} vars[env.INTERNAL_SUBNET_NAME] {{"}}"}}' >> $GITHUB_OUTPUT

          LEN_EXPECTED=$(echo '${{"{{"}} vars[env.ENV_TYPE_NAME] {{"}}"}}' | jq '. | length')
          if [ -z "$LEN_EXPECTED" ]; then
            LEN_EXPECTED=1
          fi

          echo "LEN_EXPECTED=$LEN_EXPECTED" >> $GITHUB_OUTPUT
          echo DEPLOY_ENVS="`jq -cn "[range(0; $LEN_EXPECTED)]"`" >> $GITHUB_OUTPUT

      - name: Check and set vars for instances
        id: set_env_main
        if: steps.vars_enabled.outputs.ENABLE_DEPLOY == 'true'

        run: |
          LEN_EXPECTED=${{"{{"}} steps.vars_deploy.outputs.LEN_EXPECTED {{"}}"}}

          {{- range $_, $a := .Applications }}
            if [ -z "${{"{{"}} vars[env.PORT_PREFIX_{{ $a.Name | ToUpper | ReplaceDash }}_TRAEFIK_NAME] {{"}}"}}" ]; then
              echo "Empty variable ${{"{{"}} env.PORT_PREFIX_{{ $a.Name | ToUpper | ReplaceDash }}_TRAEFIK_NAME {{"}}"}}"
              exit 3
            fi

            LEN=$(echo '${{"{{"}} vars[env.PORT_PREFIX_{{ $a.Name | ToUpper | ReplaceDash }}_TRAEFIK_NAME] {{"}}"}}' | jq '. | length')

            if [ "$LEN" != "$LEN_EXPECTED" ]; then
              echo "Invalid array size ${{"{{"}} env.PORT_PREFIX_{{ $a.Name | ToUpper | ReplaceDash }}_TRAEFIK_NAME {{"}}"}}: $LEN"
              exit 4
            fi

            echo 'PORT_PREFIX_{{ $a.Name | ToUpper | ReplaceDash }}_TRAEFIK=${{"{{"}} vars[env.PORT_PREFIX_{{ $a.Name | ToUpper | ReplaceDash}}_TRAEFIK_NAME] {{"}}"}}' >> $GITHUB_OUTPUT

            {{- range $_, $t := $a.GetRestTransport }}{{ if ne $t.GeneratorType "ogen_client" }}
            {{ if $t.PublicService }}
          if [ -z "${{"{{"}} vars[env.DOMAIN_{{ $t.Name | ToUpper }}_NAME] {{"}}"}}" ]; then
            echo "Empty variable ${{"{{"}} env.DOMAIN_{{ $t.Name | ToUpper }}_NAME {{"}}"}}"
            exit 5
          fi

          LEN=$(echo '${{"{{"}} vars[env.DOMAIN_{{ $t.Name | ToUpper }}_NAME] {{"}}"}}' | jq '. | length')

          if [ "$LEN" != "$LEN_EXPECTED" ]; then
            echo "Invalid array size ${{"{{"}} env.DOMAIN_{{ $t.Name | ToUpper }}_NAME {{"}}"}}: $LEN"
            exit 6
          fi

          echo 'DOMAIN_{{ $t.Name | ToUpper }}=${{"{{"}} vars[env.DOMAIN_{{ $t.Name | ToUpper }}_NAME] {{"}}"}}' >> $GITHUB_OUTPUT
            {{ end }}
          if [ -z "${{"{{"}} vars[env.PORT_PREFIX_{{ $a.Name | ToUpper | ReplaceDash }}_{{ $t.Name | ToUpper }}_NAME] {{"}}"}}" ]; then
            echo "Empty variable ${{"{{"}} env.PORT_PREFIX_{{ $a.Name | ToUpper | ReplaceDash }}_{{ $t.Name | ToUpper }}_NAME {{"}}"}}"
            exit 3
          fi

          LEN=$(echo '${{"{{"}} vars[env.PORT_PREFIX_{{ $a.Name | ToUpper | ReplaceDash }}_{{ $t.Name | ToUpper }}_NAME] {{"}}"}}' | jq '. | length')

          if [ "$LEN" != "$LEN_EXPECTED" ]; then
            echo "Invalid array size ${{"{{"}} env.PORT_PREFIX_{{ $a.Name | ToUpper | ReplaceDash }}_{{ $t.Name | ToUpper }}_NAME {{"}}"}}: $LEN"
            exit 4
          fi

          echo 'PORT_PREFIX_{{ $a.Name | ToUpper | ReplaceDash }}_{{ $t.Name | ToUpper }}=${{"{{"}} vars[env.PORT_PREFIX_{{ $a.Name | ToUpper | ReplaceDash}}_{{ $t.Name | ToUpper }}_NAME] {{"}}"}}' >> $GITHUB_OUTPUT
            {{ end -}}{{ end -}}
          {{ end -}}

          LEN=$(echo '${{"{{"}} vars[env.ENV_TYPE_NAME] {{"}}"}}' | jq '. | length')

          if [ "$LEN" != "$LEN_EXPECTED" ]; then
            echo "Invalid array size ${{"{{"}} env.ENV_TYPE_NAME {{"}}"}}: $LEN"
            exit 7
          fi

          echo 'ENV_TYPE=${{"{{"}} vars[env.ENV_TYPE_NAME] {{"}}"}}' >> $GITHUB_OUTPUT

          if [ -z "${{"{{"}} secrets[env.OC_USER_NAME] {{"}}"}}" ]; then
            echo "Empty secrets ${{"{{"}} env.OC_USER_NAME {{"}}"}}"
            exit 8
          fi

          LEN=$(echo '${{"{{"}} secrets[env.OC_USER_NAME] {{"}}"}}' | jq '. | length')

          if [ "$LEN" != "$LEN_EXPECTED" ]; then
            echo "Invalid array size ${{"{{"}} env.OC_USER_NAME {{"}}"}}: $LEN"
            exit 9
          fi

          echo 'OC_USER=${{"{{"}} env.OC_USER_NAME {{"}}"}}' >> $GITHUB_OUTPUT

          if [ -z "${{"{{"}} secrets[env.OC_PASSWORD_NAME] {{"}}"}}" ]; then
            echo "Empty secrets ${{"{{"}} env.OC_PASSWORD_NAME {{"}}"}}"
            exit 10
          fi
          LEN=$(echo '${{"{{"}} secrets[env.OC_PASSWORD_NAME] {{"}}"}}' | jq '. | length')

          if [ "$LEN" != "$LEN_EXPECTED" ]; then
            echo "Invalid array size ${{"{{"}} env.OC_PASSWORD_NAME {{"}}"}}: $LEN"
            exit 11
          fi

          echo 'OC_PASSWORD=${{"{{"}} env.OC_PASSWORD_NAME {{"}}"}}' >> $GITHUB_OUTPUT

      - name: Checkout repository
        if: steps.vars_enabled.outputs.ENABLE_BUILD == 'true'
        uses: actions/checkout@v3

      - name: "Version and containers"
        id: vers_and_containers
        if: steps.vars_enabled.outputs.ENABLE_BUILD == 'true'
        run: |
          vers=$(make release-tag)
          containerList=$(make docker-list)

          echo "RELEASE=$vers" >> $GITHUB_OUTPUT
          echo "CONTAINERS=$containerList" >> $GITHUB_OUTPUT

          art=$(make artifact-list)

          echo "ARTIFACTS=$art" >> $GITHUB_OUTPUT

      - name: Upload env file
        uses: actions/upload-artifact@v4
        if: steps.vars_enabled.outputs.ENABLE_DEPLOY == 'true'
        with:
          name: envs-docker
          path: docker-compose-*.yaml
          retention-days: 1
          overwrite: true

  create_env_files:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        envs: ${{"{{"}} fromJSON(needs.prepare-env.outputs.DEPLOY_ENVS) {{"}}"}}
    needs:
      - prepare-env
    if: needs.prepare-env.outputs.ENABLE_DEPLOY == 'true'
    steps:
      - name: Create env file
        id: create_env_file
        run: |
          fname=".env."${{"{{"}} github.ref_name {{"}}"}}

          ENV_TYPE=${{"{{"}} fromJSON(needs.prepare-env.outputs.ENV_TYPE)[matrix.envs] {{"}}"}}
          if [ ! -z "$ENV_TYPE" ]; then
            fname="$fname-$ENV_TYPE"
          fi

          {{- range $_, $a := .Applications }}
          echo 'PORT_PREFIX_{{ $a.Name | ToUpper | ReplaceDash }}_TRAEFIK="${{"{{"}} fromJson(needs.prepare-env.outputs.PORT_PREFIX_{{ $a.Name | ToUpper | ReplaceDash }}_TRAEFIK)[matrix.envs] {{"}}"}}"' >> $fname
            {{- range $_, $t := $a.GetRestTransport }}{{ if ne $t.GeneratorType "ogen_client" }}
              {{ if $t.PublicService }}
          echo 'DOMAIN_{{ $t.Name | ToUpper }}="${{"{{"}} fromJson(needs.prepare-env.outputs.DOMAIN_{{ $t.Name | ToUpper }})[matrix.envs] {{"}}"}}"' >> $fname
              {{ end }} 
          echo 'PORT_PREFIX_{{ $a.Name | ToUpper | ReplaceDash }}_{{ $t.Name | ToUpper }}="${{"{{"}} fromJson(needs.prepare-env.outputs.PORT_PREFIX_{{ $a.Name | ToUpper | ReplaceDash }}_{{ $t.Name | ToUpper }})[matrix.envs] {{"}}"}}"' >> $fname
            {{- end }}{{- end }}
          {{- end }}
          echo "ENV_TYPE=$ENV_TYPE" >> $fname
          echo 'OC_HOST="${{"{{"}} needs.prepare-env.outputs.OC_HOST {{"}}"}}"' >> $fname
          echo 'OC_PORT="${{"{{"}} needs.prepare-env.outputs.OC_PORT {{"}}"}}"' >> $fname          
          echo 'OC_USER="${{"{{"}} fromJson(secrets[needs.prepare-env.outputs.OC_USER])[matrix.envs] {{"}}"}}"' >> $fname
          echo 'OC_PASSWORD="${{"{{"}} fromJson(secrets[needs.prepare-env.outputs.OC_PASSWORD])[matrix.envs] {{"}}"}}"' >> $fname
          echo 'APP_VERSION="${{"{{"}} needs.prepare-env.outputs.RELEASE {{"}}"}}"' >> $fname
          echo 'REGISTRY_SERVER=${{"{{"}} secrets.REGISTRY_LOGIN_SERVER {{"}}"}}/${{"{{"}} vars.REGISTRY_CONTAINER {{"}}"}}' >> $fname
          echo 'INTERNAL_SUBNET=${{"{{"}} needs.prepare-env.outputs.INTERNAL_SUBNET {{"}}"}}' >> $fname


          # ToDo add file encriptions
          echo "Generated $fname"
          echo "FNAME=$fname" >> $GITHUB_OUTPUT

      - name: Upload env file
        uses: actions/upload-artifact@v4
        with:
          name: envs-${{"{{"}} matrix.envs {{"}}"}}
          path: ${{"{{"}} steps.create_env_file.outputs.FNAME {{"}}"}}
          retention-days: 1
          include-hidden-files: true
          overwrite: true

  build:
    runs-on: ubuntu-latest
    needs:
      - prepare-env
    strategy:
      matrix:
        containers: ${{"{{"}} fromJSON(needs.prepare-env.outputs.CONTAINERS) {{"}}"}}
    if: needs.prepare-env.outputs.ENABLE_BUILD == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      {{ if eq .RegistryType "digitalocean" }}
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{"{{"}} secrets.REGISTRY_PASSWORD {{"}}"}}

      - name: Log in to DO Container Registry
        run: doctl registry login
      {{ else if eq .RegistryType "github" }}
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{"{{"}} secrets.GHCR_USER {{"}}"}}
          password: ${{"{{"}} secrets.GHCR_TOKEN {{"}}"}}
      {{ else }}
        {{ .UndefinedRegistryTypeError .RegistryType }}
      {{ end }}
      - name: "Build and push"
        id: build_and_push
        env:
          REGISTRY_SERVER: ${{"{{"}} secrets.REGISTRY_LOGIN_SERVER {{"}}"}}/${{"{{"}} vars.REGISTRY_CONTAINER {{"}}"}}
        run: |
          make ${{"{{"}} matrix.containers {{"}}"}}
          make ${{"{{"}} matrix.containers {{"}}"}}-push

      - name: Report Build status
        uses: act10ns/slack@v2
        if: failure()
        with:
          status: ${{"{{"}} job.status {{"}}"}}
          steps: ${{"{{"}} toJson(steps) {{"}}"}}
          matrix: ${{"{{"}} toJson(matrix) {{"}}"}}
        env:
          SLACK_WEBHOOK_URL: ${{"{{"}} secrets.ACTION_MONITORING_SLACK {{"}}"}}

  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ips: ${{"{{"}} fromJSON(needs.prepare-env.outputs.SSH_HOST_MATRIX) {{"}}"}}
    needs:
      - build
      - create_env_files
      - prepare-env
    if: needs.prepare-env.outputs.ENABLE_DEPLOY == 'true'
    steps:
      - name: Download env file
        uses: actions/download-artifact@v4

      - name: Modify env file
        run: |
          for f in $(ls envs-*/.env.*); do
            echo "Processing file: $f"
            echo "INTERNAL_LAN=${{"{{"}} matrix.ips[1] {{"}}"}}" >> $f
          done

      - name: Deploy to Server
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{"{{"}} secrets.SSH_PRIVATE_KEY {{"}}"}}
          ARGS: '-rlgoDzvcb -i --delete --backup-dir="../envs_bak" --suffix=`date "+%F_%R"`'
          SOURCE: "./envs-*/"
          REMOTE_HOST: ${{"{{"}} matrix.ips[0] {{"}}"}}
          REMOTE_USER: ${{"{{"}} secrets.SSH_USER {{"}}"}}
          TARGET: /opt/{{ .ProjectName }}-cd/envs
          SCRIPT_AFTER_REQUIRED: true
          SCRIPT_AFTER: |
            cd /opt/{{ .ProjectName }}-cd;
            mv envs/docker-compose-*.yaml ./;
            ./deploy.sh || exit 1;
            echo $RSYNC_STDOUT;

      - name: Report Deploy status
        uses: act10ns/slack@v2
        with:
          status: ${{"{{"}} job.status {{"}}"}}
          steps: ${{"{{"}} toJson(steps) {{"}}"}}
          matrix: ${{"{{"}} toJson(matrix) {{"}}"}}
        env:
          SLACK_WEBHOOK_URL: ${{"{{"}} secrets.ACTION_MONITORING_SLACK {{"}}"}}

  artifact_version:
    runs-on: ubuntu-latest
    needs:
      - prepare-env
      - build
    if: needs.prepare-env.outputs.ENABLE_BUILD == 'true'
    env:
      TELEGRAM_BOT_TOKEN: ${{"{{"}} secrets.TELEGRAM_BOT_TOKEN {{"}}"}}
      TELEGRAM_CHAT_ID: ${{"{{"}} secrets.TELEGRAM_CHAT_ID {{"}}"}}

    steps:
      - name: Check conditions and set message
        run: |
          BRANCH="${{"{{"}} github.ref_name {{"}}"}}"
          STATUS="${{"{{"}} needs.build.result {{"}}"}}"
          COMMIT_MSG="${{"{{"}} github.event.head_commit.message {{"}}"}}"
          RUN_URL="https://github.com/${{"{{"}} github.repository {{"}}"}}/actions/runs/${{"{{"}} github.run_id {{"}}"}}"

          # Проверка секретов
          if [[ -z "$TELEGRAM_BOT_TOKEN" || -z "$TELEGRAM_CHAT_ID" ]]; then
            echo "MESSAGE=" >> $GITHUB_ENV
            exit 0
          fi

          # Проверка ветки
          if [[ "$BRANCH" != "main" && "$BRANCH" != "staging" ]]; then
            echo "MESSAGE=" >> $GITHUB_ENV
            exit 0
          fi

          # Экранируем commit message для MarkdownV2
          ESCAPED_COMMIT_MSG=$(echo "$COMMIT_MSG" | sed -e 's/[_*()~`>+=|{}.:-]\|]/\\&/g')

          # Формирование сообщения
          if [[ "$STATUS" == "success" ]]; then
            VERS=$(echo '${{"{{"}} needs.prepare-env.outputs.ARTIFACTS {{"}}"}}' | jq '.[]' |  sed -e 's/[_*()~`>+=|{}.:-]\|]/\\&/g')
            MESSAGE="✅ Успех: *${{"{{"}} github.workflow {{"}}"}}* завершен на ветке *$BRANCH*
            Коммит: _${ESCAPED_COMMIT_MSG}_
            [Посмотреть билд](${RUN_URL})
            ${VERS}"
          else
            MESSAGE="❌ Ошибка: *${{"{{"}} github.workflow {{"}}"}}* завершился с ошибкой на ветке *$BRANCH*
            Коммит: _${ESCAPED_COMMIT_MSG}_
            [Посмотреть билд](${RUN_URL})"
          fi

          curl -s -X POST https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage \
            -d chat_id=$TELEGRAM_CHAT_ID \
            -d text="$MESSAGE" \
            -d parse_mode="MarkdownV2"
