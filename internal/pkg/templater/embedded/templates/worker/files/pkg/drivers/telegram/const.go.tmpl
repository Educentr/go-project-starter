package telegram

import (
	"context"
	"errors"

	"github.com/gofrs/uuid/v5"
	tgbotapi "github.com/OvyFlash/telegram-bot-api"
)

type UpdateHandler interface {
	PreCheckout(ctx context.Context, update tgbotapi.Update) (context.Context, error)
	Purchase(ctx context.Context, update tgbotapi.Update) (context.Context, error)
}

type Actor struct {
	ID           int64  `json:"id"`
	FirstName    string `json:"first_name"`
	LastName     string `json:"last_name"`
	Username     string `json:"username"`
	LanguageCode string `json:"language_code"`
}

type CommandName string

func (c CommandName) String() string {
	return string(c)
}

const (
	EmptyCommandName CommandName = ""
)

type AdminRole string

const (
	RootRole AdminRole = "root"
)

type Cmd struct {
	Name            CommandName
	NeedMsg         bool
	NeedAdminAccess bool
	AdminRole       []AdminRole
	Private     	bool
	Group	  		bool
	Handler         func(ctx context.Context, h any, params string) (Response, error)
}

type ButtonCmd struct {
	Text   string
	URL    string
	Name   CommandName
	Params string
}

type Message struct {
	Text string
	TextFormat string
	//Images []tgbotapi.RequestFileData
	Photos []string
	Btn  [][]ButtonCmd
	InvoiceData *InvoiceData
}

type RequestType string

type RequestData struct {
	Type       RequestType
	ChatID     int64
	Actor      Actor
	CallbackID string
	MessageID  int
	Commands   []Cmd
	Command    Cmd
}

func (rd RequestData) ChatType() ChatType {
	if rd.ChatID == rd.Actor.ID {
		return PrivateChat
	}

	return GroupChat
}

const (
    CallbackRequest RequestType = "callback"
    TextRequest RequestType     = "text"
    PurchaseRequest RequestType = "purchase"
    PreCheckoutRequest RequestType = "pre_checkout"
)

const (
	configPath        = "security"
	currency          = "XTR"
	defaultBufferSize = 10
)

var (
	ErrInvalidAuthConfig = errors.New("invalid auth config")
	ErrTGConfiguration   = errors.New("tgSHA is nil")
	ErrInvalidTgData     = errors.New("invalid telegram config data")
)
