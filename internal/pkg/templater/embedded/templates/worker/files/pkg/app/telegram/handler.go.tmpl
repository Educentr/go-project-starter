package telegram

import (
	"context"
	"errors"

	{{ .Logger.Import }}
	tgbotapi "github.com/OvyFlash/telegram-bot-api"
	"github.com/gofrs/uuid/v5"

	"{{ .ProjectPath }}/pkg/drivers/telegram"
)

type UnimplementedAdminStatusHandler struct{}

func (UnimplementedAdminStatusHandler) GetUserState(ctx context.Context) (string, error) {
	return "", nil
}

func (UnimplementedAdminStatusHandler) SetLastMsgToUser(ctx context.Context, tgID int64, msg int) error {
	return nil
}

func (UnimplementedAdminStatusHandler) GetLastMsgToUser(ctx context.Context, tgID int64) (int, error) {
	return 0, nil
}

func (UnimplementedAdminStatusHandler) NewUserState(ctx context.Context, tgID int64, state string) error {
	return errors.New("unimplemented")
}

type UnimplementedUpdateHandler struct{}

func (UnimplementedUpdateHandler) PreCheckout(ctx context.Context, preCheckoutQuery *tgbotapi.PreCheckoutQuery) (context.Context, error) {
	return ctx, ErrUnimplementedHandler
}

func (UnimplementedUpdateHandler) Purchase(ctx context.Context, TgID int64, successfulPayment *tgbotapi.SuccessfulPayment) (context.Context, error) {
	return ctx, ErrUnimplementedHandler
}

func (UnimplementedUpdateHandler) TextMessage(ctx context.Context, message *tgbotapi.Message) (context.Context, error) {
	return ctx, ErrUnimplementedHandler
}


func (UnimplementedUpdateHandler)  CallbackQuery(ctx context.Context, callbackQuery *tgbotapi.CallbackQuery) (context.Context, error) {
	return ctx, ErrUnimplementedHandler
}

var (
	ErrUnimplementedHandler = errors.New("unimplemented handler")
	ErrUnsupportedHandler = errors.New("unsupported handler")    
)

type ParamI interface {
	Pack() string
	Unpack(ctx context.Context, params string) error
}

type CommandName string

func (c CommandName) String() string {
	return string(c)
}

const (
	EmptyCommandName CommandName = ""
)

type ButtonCmd struct {
	Text   string
	URL    string
	Name   CommandName
	Params string
}

type RespMessage struct {
	TmMsg       string
	TgFormat    string
	InvoiceData *telegram.InvoiceData
	Photos      string
	ButtonCMDs  [][]ButtonCmd
}

type ResponseRedirect struct {
	Cmd CommandName
	Params string
}

type Response struct {
	InternalRedirect *ResponseRedirect
	Messages      []RespMessage
	NextState     *string
	NotifyMsg     string
	DeleteLastMsg bool
	DeleteCurMsg  bool
}


type DefaultHandler struct{}

func (DefaultHandler) HandleBack(ctx context.Context) (Response, error) {
	emptyState := ""
	return Response{
		NextState:    &emptyState,
		DeleteCurMsg: true,
	}, nil
}

func (DefaultHandler) PreCheckout(ctx context.Context, preCheckoutQuery *tgbotapi.PreCheckoutQuery) (context.Context, string) {
	return ctx, "unimplemented"
}

func (DefaultHandler) ProcessPayment(ctx context.Context, idempotency uuid.UUID, successfulPayment *tgbotapi.SuccessfulPayment) (Response, error) {
	return Response{}, errors.New("unimplemented")
}

func (DefaultHandler) Authorization(ctx context.Context, cmd any, pp string) (context.Context, error) {
	return ctx, nil
}

func ConvertButtonCMDToTgButton(ctx context.Context, btn [][]ButtonCmd) ([][]tgbotapi.InlineKeyboardButton, error) {
	tgBtn := make([][]tgbotapi.InlineKeyboardButton, len(btn))

	for i := range btn {
		tgBtn[i] = make([]tgbotapi.InlineKeyboardButton, 0, len(btn[i]))

		for j := range btn[i] {
			if btn[i][j].URL != "" {
				if len(btn[i][j].URL) > 256 {
					zlog.Ctx(ctx).Error().Int("Len", len(btn[i][j].URL)).Str("Text", btn[i][j].Text).Str("URL", btn[i][j].URL).Msg("Button URL too long")
					
					continue
				}

				tgBtn[i] = append(tgBtn[i], tgbotapi.NewInlineKeyboardButtonURL(btn[i][j].Text, btn[i][j].URL))

				continue
			}

			if btn[i][j].Name == EmptyCommandName {
				zlog.Ctx(ctx).Error().Msg("Empty button command name")

				continue
			}

			if btn[i][j].Text == "" {
				zlog.Ctx(ctx).Error().Msg("Empty button command text")

				continue
			}

			data := "/" + string(btn[i][j].Name) + ":" + btn[i][j].Params
			if len(data) > 64 {
				zlog.Ctx(ctx).Error().Int("Len", len(data)).Str("Text", btn[i][j].Text).Str("Data", data).Msg("Button text too long")

				continue
			}

			tgBtn[i] = append(tgBtn[i], tgbotapi.NewInlineKeyboardButtonData(btn[i][j].Text, data))
		}
	}

	return tgBtn, nil
}
