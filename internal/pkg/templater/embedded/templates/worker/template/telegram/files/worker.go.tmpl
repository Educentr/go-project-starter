package telegrambot

import (
	"context"
	"errors"

	tgbotapi "github.com/OvyFlash/telegram-bot-api"
	{{ .Logger.Import }}

	"{{ .ProjectPath }}/internal/app/worker/telegrambot/handler"
	"{{ .ProjectPath }}/pkg/drivers/telegram"
	apptg "{{ .ProjectPath }}/pkg/app/telegram"
)

type Cmd struct {
	Name            telegram.CommandName
	NeedMsg         bool
	NeedAdminAccess bool
	Private     	bool
	Group	  		bool
	Handler         func(ctx context.Context, h *handler.Handler, params string) (apptg.Response, error)
	Params          apptg.ParamI
}

var cmdMaps = make(map[telegram.CommandName]Cmd)

var CustomError = map[error]func(ctx context.Context) (apptg.Response, error){}

func (w *Worker) processRequest(ctx context.Context, requestType RequestType, hdl *handler.Handler, c Cmd, pp string) {
	actor, err := reqctx.GetActor(ctx)
	if err != nil {
		if !errors.Is(err, reqctx.ErrUndefinedActor) {
			{{ .Logger.ErrorMsg "ctx" "err" "Error getting actor from context" }}
		}
		
		return
	}

	appActor, ok := actor.(*ds.Actor)
	if !ok {
		{{ .Logger.ErrorMsg "ctx" "err" "Actor is not of type ds.Actor" }}

		return
	}

	if appActor == nil || appActor.GetID() == 0 || appActor.TgActor.ID == 0 {
		zlog.Ctx(ctx).Error().Msg("Actor is nil")

		return
	}

	for {
		aclErr := w.Authorization(ctx, c)
		if aclErr != nil {
			w.HandleAuthError(ctx, requestType, aclErr)

			return
		}

		resp, err := c.Handler(ctx, hdl, pp)
		if resp.InternalRedirect != nil {
			c, ok = cmdMaps[resp.InternalRedirect.Cmd]
			if !ok {
				zlog.Ctx(ctx).Error().Str("Cmd", resp.InternalRedirect.Cmd.String()).Msg("Unknown command for internal redirect")

				w.postProcessRequest(ctx, requestType, apptg.Response{}, ErrInternalError)

				return
			}

			pp = resp.InternalRedirect.Params
			continue
		}

		w.postProcessRequest(ctx, requestType, resp, err)
		
		break
	}
	
	return
}

func (w *Worker) HandleAuthError(ctx context.Context, requestType RequestType, aclErr error) {
	for cErr, cFunc := range CustomError {
		if errors.Is(aclErr, cErr) {
			resp, err := cFunc(ctx)
			w.postProcessRequest(ctx, requestType, resp, err)

			return
		}
	}

	if errors.Is(aclErr, ErrUserNotFound) {
		{{ .Logger.ErrorMsg "ctx" "aclErr" "Admin not found. Skip" }}

		w.postProcessRequest(ctx, requestType, apptg.Response{}, nil)

		return
	}

	if errors.Is(aclErr, ErrAccessDenied) {
		{{ .Logger.ErrorMsg "ctx" "aclErr" "Access denied" }}

		w.postProcessRequest(ctx, requestType, apptg.Response{}, nil)

		return
	}

	{{ .Logger.ErrorMsg "ctx" "aclErr" "Error checking ACL" }}

	w.postProcessRequest(ctx, requestType, apptg.Response{}, ErrInternalError)

	return
}

func (w *Worker) postProcessRequest(ctx context.Context, requestType RequestType, resp apptg.Response, err error) {
	curMsgID, errCurMsg := reqctx.GetMsgID(ctx)
	if errCurMsg != nil {
		zlog.Ctx(ctx).Error().Err(errCurMsg).Msg("Error getting current message ID from context")
	}

	chatID, errChat := reqctx.GetChatID(ctx)
	if errChat != nil {
		zlog.Ctx(ctx).Error().Err(errChat).Msg("Error getting chat ID from context")

		return
	}

	tgActor, errActor := reqctx.GetTgActor(ctx)
	if errActor != nil {
		zlog.Ctx(ctx).Error().Err(errActor).Msg("Error getting tg actor from context")

		return
	}
	
	notifyMsg := resp.NotifyMsg

	switch {
	case err != nil:
		zlog.Ctx(ctx).Error().Err(err).Msg("Error processing command")

		resp.Messages = []telegram.Message{ {
			Text:      err.Error(),
		} }

		if notifyMsg != "" {
			notifyMsg = err.Error()
		}

	case resp.NextState != nil:
		if err := w.NewUserState(ctx, tgActor.ID, *resp.NextState); err != nil {
			zlog.Ctx(ctx).Error().Err(err).Msg("Error setting admin state")

			resp.Messages = []telegram.Message{ {
				Text: "Internal error",
			} }

			if notifyMsg != "" {
				notifyMsg = "Internal error"
			}
		}
	}

	srv, errSrv := w.GetEmptySrv()
	if errSrv != nil {
		zlog.Ctx(ctx).Error().Err(errSrv).Msg("Error getting service")

		return
	}

	if resp.DeleteLastMsg {
		msgID, err := w.GetLastMsgToUser(ctx, tgActor.ID)
		if err != nil || msgID == 0 {
			notifyMsg = "Error getting last message ID"

			zlog.Ctx(ctx).Error().Err(err).Msg("Error getting last message ID")
		}

		err = srv.TelegramDeleteMessage(ctx, tgActor.ID, msgID)
		if err != nil {
			zlog.Ctx(ctx).Error().Err(err).Msg("Error deleting message")
		}
	}

	if resp.DeleteCurMsg {
		err = srv.TelegramDeleteMessage(ctx, tgActor.ID, curMsgID)
		if err != nil {
			zlog.Ctx(ctx).Error().Err(err).Msg("Error deleting message")
		}
	}

	callbackID, errCallback := reqctx.GetCallbackID(ctx)
	if errCallback != nil && !errors.Is(errCallback, reqctx.ErrUndefinedCallbackID) {
		zlog.Ctx(ctx).Error().Err(errCallback).Msg("Error getting callback ID from context")
	}

	if callbackID != "" {
		_, err = srv.TelegramAnswerCallback(ctx, callbackID, notifyMsg)
		if err != nil {
			zlog.Ctx(ctx).Error().Err(err).Msg("Error sending answer")
		}
	}

	msgID := 0

	for _, tgMsg := range resp.Messages {
		switch {
		case tgMsg.InvoiceData != nil:
			msgID, err = srv.SendInvoice(ctx, chatID, *tgMsg.InvoiceData)
			if err != nil {
				zlog.Ctx(ctx).Error().Err(err).Msg("Error sending invoice")
				return
			}

		case tgMsg.Text != "" || len(tgMsg.Photos) > 0:
			if requestType == CallbackRequest && resp.UpdateCurMsg && curMsgID != 0 {
				msgID, err = srv.TelegramUpdateMessageButtons(ctx, chatID, curMsgID, tgMsg)
			} else {
				msgID, err = srv.TelegramSendMessageButtons(ctx, chatID, tgMsg)
			}

			if err != nil {
				zlog.Ctx(ctx).Error().Interface("Message", tgMsg).Err(err).Msg("Error sending message")

				origErr := err

				actor, err := reqctx.GetActor(ctx)
				if err != nil {
					zlog.Ctx(ctx).Error().Err(err).Msg("Error getting actor from context")

					return
				}

				appActor, ok := actor.(*ds.Actor)
				if !ok {
					zlog.Ctx(ctx).Error().Msg("Actor is not of type ds.Actor")

					return
				}

				if appActor == nil || appActor.GetID() == 0 || appActor.TgActor.ID == 0 {
					zlog.Ctx(ctx).Error().Msg("Actor is nil")

					return
				}

				adm, err := w.IsActorAdmin(ctx, appActor.TgActor)
				if err != nil {
					zlog.Ctx(ctx).Error().Err(err).Msg("Error checking if actor is admin")

					return
				}

				if adm {
					_, err = srv.TelegramSendMessageButtons(ctx, chatID, telegram.Message{
						Text: "Error sending message: " + origErr.Error(),
					})
					if err != nil {
						zlog.Ctx(ctx).Error().Err(err).Msg("Error sending error message to admin")
					}
				}

				return
			}
		default:
			zlog.Ctx(ctx).Error().Interface("Message", tgMsg).Msg("Empty message")

			continue
		}
		
		err = w.SetLastMsgToUser(ctx, tgActor.ID, msgID)
		if err != nil {
			zlog.Ctx(ctx).Error().Err(err).Msg("Error setting last message ID")

			return
		}
	}
}
