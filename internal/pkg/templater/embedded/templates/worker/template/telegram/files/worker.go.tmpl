package telegrambot

import (
	"context"
	"errors"

	{{ .Logger.Import }}

	"{{ .ProjectPath }}/pkg/reqctx"
	"{{ .ProjectPath }}/internal/app/worker/telegrambot/handler"
	"{{ .ProjectPath }}/pkg/drivers/telegram"
)

var cmdMaps = make(map[telegram.CommandName]telegram.Cmd)

var CustomError = map[error]func(ctx context.Context) (telegram.Response, error){}

func (w *Worker) processRequest(ctx context.Context, hdl *handler.Handler, c telegram.Cmd, pp string) {
	actor, err := reqctx.GetActor(ctx)
	if err != nil {
		if !errors.Is(err, reqctx.ErrUndefinedActor) {
			{{ .Logger.ErrorMsg "ctx" "err" "Error getting actor from context" }}
		}
		
		return
	}

	appActor, ok := actor.(*ds.Actor)
	if !ok {
		{{ .Logger.ErrorMsg "ctx" "err" "Actor is not of type ds.Actor" }}

		return
	}

	if appActor == nil || appActor.GetID() == 0 || appActor.TgActor.ID == 0 {
		zlog.Ctx(ctx).Error().Msg("Actor is nil")

		return
	}

	for {
		aclErr := w.Authorization(ctx, hdl.Rd)
		if aclErr != nil {
			w.HandleAuthError(ctx, hdl.Rd, aclErr)

			return
		}

		resp, err := c.Handler(ctx, hdl, pp)
		if resp.InternalRedirect != nil {
			c, ok = cmdMaps[resp.InternalRedirect.Cmd]
			if !ok {
				zlog.Ctx(ctx).Error().Str("Cmd", resp.InternalRedirect.Cmd.String()).Msg("Unknown command for internal redirect")

				w.postProcessRequest(ctx, hdl.Rd, telegram.Response{}, telegram.ErrInternalError)

				return
			}

			pp = resp.InternalRedirect.Params
			continue
		}

		w.postProcessRequest(ctx, hdl.Rd, resp, err)
		
		break
	}
	
	return
}

func (w *Worker) HandleAuthError(ctx context.Context, requestData telegram.RequestData, aclErr error) {
	for cErr, cFunc := range CustomError {
		if errors.Is(aclErr, cErr) {
			resp, err := cFunc(ctx)
			w.postProcessRequest(ctx, requestData, resp, err)

			return
		}
	}

	if errors.Is(aclErr, telegram.ErrUserNotFound) {
		{{ .Logger.ErrorMsg "ctx" "aclErr" "Admin not found. Skip" }}

		w.postProcessRequest(ctx, requestData, telegram.Response{}, nil)

		return
	}

	if errors.Is(aclErr, telegram.ErrAccessDenied) {
		{{ .Logger.ErrorMsg "ctx" "aclErr" "Access denied" }}

		w.postProcessRequest(ctx, requestData, telegram.Response{}, nil)

		return
	}

	{{ .Logger.ErrorMsg "ctx" "aclErr" "Error checking ACL" }}

	w.postProcessRequest(ctx, requestData, telegram.Response{}, telegram.ErrInternalError)

	return
}

func (w *Worker) postProcessRequest(ctx context.Context, requestData telegram.RequestData, resp telegram.Response, err error) {
	tgActor, errActor := reqctx.GetActor(ctx)
	if errActor != nil {
		zlog.Ctx(ctx).Error().Err(errActor).Msg("Error getting tg actor from context")

		return
	}
	
	notifyMsg := resp.NotifyMsg

	switch {
	case err != nil:
		zlog.Ctx(ctx).Error().Err(err).Msg("Error processing command")

		resp.Messages = []telegram.Message{ {
			Text:      err.Error(),
		} }

		if notifyMsg != "" {
			notifyMsg = err.Error()
		}

	case resp.NextState != nil:
		if err := w.NewUserState(ctx, tgActor.GetID(), *resp.NextState); err != nil {
			zlog.Ctx(ctx).Error().Err(err).Msg("Error setting admin state")

			resp.Messages = []telegram.Message{ {
				Text: "Internal error",
			} }

			if notifyMsg != "" {
				notifyMsg = "Internal error"
			}
		}
	}

	srv, errSrv := w.GetEmptySrv()
	if errSrv != nil {
		zlog.Ctx(ctx).Error().Err(errSrv).Msg("Error getting service")

		return
	}

	if resp.DeleteLastMsg {
		msgID, err := w.GetLastMsgToUser(ctx, tgActor.GetID())
		if err != nil || msgID == 0 {
			notifyMsg = "Error getting last message ID"

			zlog.Ctx(ctx).Error().Err(err).Msg("Error getting last message ID")
		}

		err = srv.TelegramDeleteMessage(ctx, tgActor.GetID(), msgID)
		if err != nil {
			zlog.Ctx(ctx).Error().Err(err).Msg("Error deleting message")
		}
	}

	if resp.DeleteCurMsg {
		err = srv.TelegramDeleteMessage(ctx, tgActor.GetID(), requestData.MessageID)
		if err != nil {
			zlog.Ctx(ctx).Error().Err(err).Msg("Error deleting message")
		}
	}

	if requestData.CallbackID != "" {
		_, err = srv.TelegramAnswerCallback(ctx, requestData.CallbackID, notifyMsg)
		if err != nil {
			zlog.Ctx(ctx).Error().Err(err).Msg("Error sending answer")
		}
	}

	msgID := 0

	for _, tgMsg := range resp.Messages {
		switch {
		case tgMsg.InvoiceData != nil:
			msgID, err = srv.SendInvoice(ctx, requestData.ChatID, *tgMsg.InvoiceData)
			if err != nil {
				zlog.Ctx(ctx).Error().Err(err).Msg("Error sending invoice")
				return
			}

		case tgMsg.Text != "" || len(tgMsg.Photos) > 0:
			if requestData.Type == telegram.CallbackRequest && resp.UpdateCurMsg && requestData.MessageID != 0 {
				msgID, err = srv.TelegramUpdateMessageButtons(ctx, requestData.ChatID, requestData.MessageID, tgMsg)
				if err != nil {
					zlog.Ctx(ctx).Error().Err(err).Msg("Error updating message")
					msgID, err = srv.TelegramSendMessageButtons(ctx, requestData.ChatID, tgMsg)
				}
			} else {
				msgID, err = srv.TelegramSendMessageButtons(ctx, requestData.ChatID, tgMsg)
			}

			if err != nil {
				zlog.Ctx(ctx).Error().Interface("Message", tgMsg).Err(err).Msg("Error sending message")

				origErr := err

				actor, err := reqctx.GetActor(ctx)
				if err != nil {
					zlog.Ctx(ctx).Error().Err(err).Msg("Error getting actor from context")

					return
				}

				appActor, ok := actor.(*ds.Actor)
				if !ok {
					zlog.Ctx(ctx).Error().Msg("Actor is not of type ds.Actor")

					return
				}

				if appActor == nil || appActor.GetID() == 0 || appActor.TgActor.ID == 0 {
					zlog.Ctx(ctx).Error().Msg("Actor is nil")

					return
				}

				adm, err := srv.IsUserAdmin(ctx, appActor.TgActor.ID)
				if err != nil {
					zlog.Ctx(ctx).Error().Err(err).Msg("Error checking if actor is admin")

					return
				}

				if adm {
					_, err = srv.TelegramSendMessageButtons(ctx, requestData.ChatID, telegram.Message{
						Text: "Error sending message: " + origErr.Error(),
					})
					if err != nil {
						zlog.Ctx(ctx).Error().Err(err).Msg("Error sending error message to admin")
					}
				}

				return
			}
		default:
			zlog.Ctx(ctx).Error().Interface("Message", tgMsg).Msg("Empty message")

			continue
		}
		
		err = w.SetLastMsgToUser(ctx, tgActor.GetID(), msgID)
		if err != nil {
			zlog.Ctx(ctx).Error().Err(err).Msg("Error setting last message ID")

			return
		}
	}
}
