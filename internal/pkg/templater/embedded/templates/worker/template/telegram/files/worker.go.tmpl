package telegrambot

import (
	"context"
	"errors"

	tgbotapi "github.com/OvyFlash/telegram-bot-api"
	{{ .Logger.Import }}

	"{{ .ProjectPath }}/internal/app/worker/telegrambot/handler"
	"{{ .ProjectPath }}/pkg/drivers/telegram"
	apptg "{{ .ProjectPath }}/pkg/app/telegram"
)

type Cmd struct {
	Name            apptg.CommandName
	NeedMsg         bool
	NeedAdminAccess bool
	Handler         func(ctx context.Context, h *handler.Handler, params string) (apptg.Response, error)
	Params          apptg.ParamI
}

var cmdMaps = make(map[apptg.CommandName]Cmd)

func (w *Worker) processRequest(ctx context.Context, hdl *handler.Handler, c Cmd, callbackID string, curMsgID int, pp string) {
	actor, err := reqctx.GetActor(ctx)
	if err != nil {
		zlog.Ctx(ctx).Error().Err(err).Msg("Error getting actor from context")

		return
	}

	appActor, ok := actor.(*ds.Actor)
	if !ok {
		zlog.Ctx(ctx).Error().Msg("Actor is not of type ds.Actor")

		return
	}

	if appActor == nil || appActor.GetID() == 0 || appActor.TgActor.ID == 0 {
		zlog.Ctx(ctx).Error().Msg("Actor is nil")

		return
	}

	for {
		aclErr := w.Authorization(ctx, appActor.TgActor, c)
		if aclErr != nil {
			w.HandleAuthError(ctx, appActor.TgActor.ID, callbackID, aclErr)

			return
		}

		resp, err := c.Handler(ctx, hdl, pp)
		if resp.InternalRedirect != nil {
			c, ok = cmdMaps[resp.InternalRedirect.Cmd]
			if !ok {
				zlog.Ctx(ctx).Error().Str("Cmd", resp.InternalRedirect.Cmd.String()).Msg("Unknown command for internal redirect")

				w.postProcessRequest(ctx, appActor.TgActor.ID, callbackID, curMsgID, apptg.Response{}, ErrInternalError)

				return
			}

			pp = resp.InternalRedirect.Params
			continue
		}

		w.postProcessRequest(ctx, appActor.TgActor.ID, callbackID, curMsgID, resp, err)
		
		break
	}
	
	return
}

func (w *Worker) HandleAuthError(ctx context.Context, tgID int64, callbackID string, aclErr error) {
	if errors.Is(aclErr, ErrUserNotFound) {
		zlog.Ctx(ctx).Error().Err(aclErr).Msg("Admin not found. Skip")

		w.postProcessRequest(ctx, tgID, callbackID, 0, apptg.Response{}, nil)

		return
	}

	if errors.Is(aclErr, ErrAccessDenied) {
		zlog.Ctx(ctx).Error().Err(aclErr).Msg("Access denied")

		w.postProcessRequest(ctx, tgID, callbackID, 0, apptg.Response{}, nil)

		return
	}

	zlog.Ctx(ctx).Error().Err(aclErr).Msg("Error checking ACL")

	w.postProcessRequest(ctx, tgID, callbackID, 0, apptg.Response{}, ErrInternalError)

	return
}

func (w *Worker) postProcessRequest(ctx context.Context, tgID int64, callbackID string, curMsgID int, resp apptg.Response, err error) {
	notifyMsg := resp.NotifyMsg

	switch {
	case err != nil:
		zlog.Ctx(ctx).Error().Err(err).Msg("Error processing command")

		resp.Messages = []apptg.RespMessage{ {
			TmMsg:      err.Error(),
		} }

		if notifyMsg != "" {
			notifyMsg = err.Error()
		}

	case resp.NextState != nil:
		if err := w.NewUserState(ctx, tgID, *resp.NextState); err != nil {
			zlog.Ctx(ctx).Error().Err(err).Msg("Error setting admin state")

			resp.Messages = []apptg.RespMessage{ {
				TmMsg: "Internal error",
			} }

			if notifyMsg != "" {
				notifyMsg = "Internal error"
			}
		}
	}

	srv, errSrv := w.GetEmptySrv()
	if errSrv != nil {
		zlog.Ctx(ctx).Error().Err(errSrv).Msg("Error getting service")

		return
	}

	if resp.DeleteLastMsg {
		msgID, err := w.GetLastMsgToUser(ctx, tgID)
		if err != nil || msgID == 0 {
			notifyMsg = "Error getting last message ID"

			zlog.Ctx(ctx).Error().Err(err).Msg("Error getting last message ID")
		}

		err = srv.TelegramDeleteMessage(ctx, tgID, msgID)
		if err != nil {
			zlog.Ctx(ctx).Error().Err(err).Msg("Error deleting message")
		}
	}

	if resp.DeleteCurMsg {
		err = srv.TelegramDeleteMessage(ctx, tgID, curMsgID)
		if err != nil {
			zlog.Ctx(ctx).Error().Err(err).Msg("Error deleting message")
		}
	}

	if callbackID != "" {
		_, err = srv.TelegramAnswerCallback(ctx, callbackID, notifyMsg)
		if err != nil {
			zlog.Ctx(ctx).Error().Err(err).Msg("Error sending answer")
		}
	}

	msgID := 0

	for _, rMsg := range resp.Messages {
		switch {
		case rMsg.InvoiceData != nil:
			msgID, err = srv.SendInvoice(ctx, tgID, *rMsg.InvoiceData)
			if err != nil {
				zlog.Ctx(ctx).Error().Err(err).Msg("Error sending invoice")
				return
			}

		case rMsg.TmMsg != "" || len(rMsg.Photos) > 0:
			btn, err := convertButtonCMDToTgButton(ctx, rMsg.ButtonCMDs)
			if err != nil {
				zlog.Ctx(ctx).Error().Err(err).Msg("Error converting button command to Telegram button")
			}

			tgMsg := telegram.Message{
				Text: rMsg.TmMsg,
				Btn: btn,
			}

			if rMsg.TgFormat != "" {
				tgMsg.TextFormat = rMsg.TgFormat
			}

			if rMsg.Photos != "" {
				tgMsg.Images = []tgbotapi.RequestFileData{tgbotapi.FilePath(rMsg.Photos)}
			}

			for i := range tgMsg.Btn {
				for j := range tgMsg.Btn[i] {
					if tgMsg.Btn[i][j].CallbackData != nil && len(*tgMsg.Btn[i][j].CallbackData) > 64 {
						zlog.Ctx(ctx).Error().Int("Len", len(*tgMsg.Btn[i][j].CallbackData)).Str("Text", tgMsg.Btn[i][j].Text).Str("Data", *tgMsg.Btn[i][j].CallbackData).Msg("Button text too long")
					}
				}
			}

			msgID, err = srv.TelegramSendMessageButtons(ctx, tgID, tgMsg)

			if err != nil {
				zlog.Ctx(ctx).Error().Interface("Message", tgMsg).Err(err).Msg("Error sending message")

				origErr := err

				actor, err := reqctx.GetActor(ctx)
				if err != nil {
					zlog.Ctx(ctx).Error().Err(err).Msg("Error getting actor from context")

					return
				}

				appActor, ok := actor.(*ds.Actor)
				if !ok {
					zlog.Ctx(ctx).Error().Msg("Actor is not of type ds.Actor")

					return
				}

				if appActor == nil || appActor.GetID() == 0 || appActor.TgActor.ID == 0 {
					zlog.Ctx(ctx).Error().Msg("Actor is nil")

					return
				}

				adm, err := w.IsActorAdmin(ctx, appActor.TgActor)
				if err != nil {
					zlog.Ctx(ctx).Error().Err(err).Msg("Error checking if actor is admin")

					return
				}

				if adm {
					_, err = srv.TelegramSendMessageButtons(ctx, tgID, telegram.Message{
						Text: "Error sending message: " + origErr.Error(),
					})
					if err != nil {
						zlog.Ctx(ctx).Error().Err(err).Msg("Error sending error message to admin")
					}
				}

				return
			}
		}
		
		err = w.SetLastMsgToUser(ctx, tgID, msgID)
		if err != nil {
			zlog.Ctx(ctx).Error().Err(err).Msg("Error setting last message ID")

			return
		}
	}
}

func convertButtonCMDToTgButton(ctx context.Context, btn [][]apptg.ButtonCmd) ([][]tgbotapi.InlineKeyboardButton, error) {
	tgBtn := make([][]tgbotapi.InlineKeyboardButton, len(btn))

	for i := range btn {
		tgBtn[i] = make([]tgbotapi.InlineKeyboardButton, 0, len(btn[i]))

		for j := range btn[i] {
			if btn[i][j].URL != "" {
				if len(btn[i][j].URL) > 256 {
					zlog.Ctx(ctx).Error().Int("Len", len(btn[i][j].URL)).Str("Text", btn[i][j].Text).Str("URL", btn[i][j].URL).Msg("Button URL too long")
					
					continue
				}

				tgBtn[i] = append(tgBtn[i], tgbotapi.NewInlineKeyboardButtonURL(btn[i][j].Text, btn[i][j].URL))

				continue
			}

			if btn[i][j].Name == handler.EmptyCommandName {
				zlog.Ctx(ctx).Error().Msg("Empty button command name")

				continue
			}

			if btn[i][j].Text == "" {
				zlog.Ctx(ctx).Error().Msg("Empty button command text")

				continue
			}

			c, ex := cmdMaps[btn[i][j].Name]
			if !ex {
				zlog.Ctx(ctx).Error().Str("Cmd", btn[i][j].Name.String()).Msg("Unknown command")

				continue
			}

			data := "/" + c.Name.String() + ":" + btn[i][j].Params
			if len(data) > 64 {
				zlog.Ctx(ctx).Error().Int("Len", len(data)).Str("Text", btn[i][j].Text).Str("Data", data).Msg("Button text too long")

				continue
			}

			tgBtn[i] = append(tgBtn[i], tgbotapi.NewInlineKeyboardButtonData(btn[i][j].Text, data))
		}
	}

	return tgBtn, nil
}
